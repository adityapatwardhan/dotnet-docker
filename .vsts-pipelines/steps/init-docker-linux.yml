parameters:
  setupRemoteDockerServer: false
  setupTestRunner: false

steps:
  ################################################################################
  # Cleanup Docker Resources
  ################################################################################
- template: cleanup-docker-linux.yml
  parameters:
    runOnlyBasicCleanup: ${{ parameters.setupRemoteDockerServer }}

  ################################################################################
  # Setup Remote Docker Server (Optional)
  ################################################################################
- ${{ if eq(parameters.setupRemoteDockerServer, 'true') }}:
  - script: >
      echo "##vso[task.setvariable variable=dockerArmRunOptions]
      -v $(DOCKER_CERT_PATH):/docker-certs
      -e DOCKER_CERT_PATH=/docker-certs
      -e DOCKER_TLS_VERIFY=1
      -e DOCKER_HOST=tcp://$(DOCKER_HOST_IP):2376"
    displayName: Define dockerArmRunOptions Variable

  ################################################################################
  # Setup Test Runner (Optional)
  ################################################################################
- ${{ if eq(parameters.setupTestRunner, 'true') }}:
  - powershell: >
      $imageNames = ./scripts/Get-ImageNames.ps1
      Write-Host "##vso[task.setvariable variable=testrunner.baseImage]
      $($imageNames.TestRunner)"
    displayName: Define testrunner.baseImage Variable
  - script: >
      echo "##vso[task.setvariable variable=testrunner.image]
      microsoft-dotnet-testrunner-withrepo"
    displayName: Define testrunner.image Variable
  - script: $(Build.Repository.LocalPath)/scripts/pull-image.sh $(testrunner.baseImage)
    displayName: Pull Test Runner
  - script: >
      docker build -t $(testrunner.image) --build-arg IMAGE=$(testrunner.baseImage) ^
        -f ./scripts/Dockerfile.WithRepo .
    displayName: Build Test Runner Image
